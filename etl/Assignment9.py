{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mysql.connector import MySQLConnection, Error\n",
    "import pandas as pd\n",
    "import mysql.connector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_connection():\n",
    "    \"\"\"\n",
    "    Make a connection to the Zagi Sales database.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        conn = MySQLConnection(host = 'IES-ADS-ClassDB.sjsu.edu',\n",
    "database = 'schemamasters_wh',\n",
    "user = 'schemamasters_user',\n",
    "password = 'Melon_522')\n",
    "        \n",
    "        if conn.is_connected():\n",
    "            print('Connected to the MySQL database!')\n",
    "            \n",
    "            return conn\n",
    "                \n",
    "    except Error as e:\n",
    "        print('Connection failed.')\n",
    "        print(e)\n",
    "        \n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Connected to the MySQL database!\n"
     ]
    }
   ],
   "source": [
    "conn = make_connection()\n",
    "cursor = conn.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All tables created successfully!\n"
     ]
    }
   ],
   "source": [
    "def create_dwh_tables(conn, cursor):\n",
    "    # SQL statements for creating tables\n",
    "    create_dim_date = \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS dim_date (\n",
    "        date_key INT PRIMARY KEY,\n",
    "        full_date DATE,\n",
    "        year INT,\n",
    "        month INT,\n",
    "        month_name VARCHAR(15),\n",
    "        quarter INT,\n",
    "        day INT,\n",
    "        day_name VARCHAR(15),\n",
    "        is_weekend VARCHAR(3)\n",
    "    )\"\"\"\n",
    "\n",
    "    create_dim_book = \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS dim_book (\n",
    "        book_key INT PRIMARY KEY,\n",
    "        book_name VARCHAR(255),\n",
    "        book_code VARCHAR(50),\n",
    "        book_price DECIMAL(10,2),\n",
    "        author_name VARCHAR(255),\n",
    "        publisher_name VARCHAR(255),\n",
    "        category_name VARCHAR(100)\n",
    "    )\"\"\"\n",
    "\n",
    "    create_dim_client = \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS dim_client (\n",
    "        client_key INT PRIMARY KEY,\n",
    "        client_name VARCHAR(255),\n",
    "        client_email VARCHAR(255),\n",
    "        client_national VARCHAR(50),\n",
    "        client_status VARCHAR(20),\n",
    "        registration_date DATE\n",
    "    )\"\"\"\n",
    "\n",
    "    create_dim_category = \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS dim_category (\n",
    "        category_key INT PRIMARY KEY,\n",
    "        category_name VARCHAR(100),\n",
    "        parent_category VARCHAR(100),\n",
    "        category_level INT,\n",
    "        category_path VARCHAR(500)\n",
    "    )\"\"\"\n",
    "\n",
    "    create_fact_dayoperations = \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS fact_dayoperations (\n",
    "        operation_key INT PRIMARY KEY,\n",
    "        date_key INT,\n",
    "        book_key INT,\n",
    "        client_key INT,\n",
    "        operation_type VARCHAR(50),\n",
    "        duration_days INT,\n",
    "        amount DECIMAL(10,2),\n",
    "        status VARCHAR(20),\n",
    "        quantity INT,\n",
    "        FOREIGN KEY (date_key) REFERENCES dim_date (date_key),\n",
    "        FOREIGN KEY (book_key) REFERENCES dim_book (book_key),\n",
    "        FOREIGN KEY (client_key) REFERENCES dim_client (client_key)\n",
    "    )\"\"\"\n",
    "\n",
    "    create_fact_category_popularity = \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS fact_category_popularity (\n",
    "        popularity_key INT PRIMARY KEY,\n",
    "        date_key INT,\n",
    "        book_key INT,\n",
    "        category_key INT,\n",
    "        total_operations INT,\n",
    "        total_duration INT,\n",
    "        total_revenue DECIMAL(12,2),\n",
    "        unique_readers INT,\n",
    "        FOREIGN KEY (date_key) REFERENCES dim_date (date_key),\n",
    "        FOREIGN KEY (book_key) REFERENCES dim_book (book_key),\n",
    "        FOREIGN KEY (category_key) REFERENCES dim_category (category_key)\n",
    "    )\"\"\"\n",
    "\n",
    "    # List of all create table statements\n",
    "    create_tables = [\n",
    "        create_dim_date,\n",
    "        create_dim_book,\n",
    "        create_dim_client,\n",
    "        create_dim_category,\n",
    "        create_fact_dayoperations,\n",
    "        create_fact_category_popularity\n",
    "    ]\n",
    "\n",
    "    # Create all tables\n",
    "    try:\n",
    "        for table_statement in create_tables:\n",
    "            cursor.execute(table_statement)\n",
    "        conn.commit()\n",
    "        print(\"All tables created successfully!\")\n",
    "    except mysql.connector.Error as e:\n",
    "        print(f\"Error creating tables: {e}\")\n",
    "        conn.rollback()\n",
    "\n",
    "# Using your existing connection\n",
    "try:\n",
    "    create_dwh_tables(conn, cursor)\n",
    "except Exception as e:\n",
    "    print(f\"Error: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Connected to the MySQL database!\n",
      "Table created successfully\n",
      "Table created successfully\n",
      "Table created successfully\n",
      "Table created successfully\n",
      "Table created successfully\n",
      "Table created successfully\n",
      "Table created successfully\n"
     ]
    }
   ],
   "source": [
    "create_tables = [\n",
    "    \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS users (\n",
    "        idusers INT PRIMARY KEY AUTO_INCREMENT,\n",
    "        user_name VARCHAR(50) NOT NULL,\n",
    "        user_email VARCHAR(100) UNIQUE NOT NULL,\n",
    "        user_password VARCHAR(50) NOT NULL\n",
    "    );\n",
    "    \"\"\",\n",
    "    \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS publisher (\n",
    "        idpublisher INT PRIMARY KEY AUTO_INCREMENT,\n",
    "        publisher_name VARCHAR(100) NOT NULL\n",
    "    );\n",
    "    \"\"\",\n",
    "    \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS clients (\n",
    "        idclients INT PRIMARY KEY AUTO_INCREMENT,\n",
    "        client_name VARCHAR(50) NOT NULL,\n",
    "        client_email VARCHAR(100) UNIQUE NOT NULL,\n",
    "        client_nationalid VARCHAR(20) NOT NULL\n",
    "    );\n",
    "    \"\"\",\n",
    "    \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS category (\n",
    "        idcategory INT PRIMARY KEY AUTO_INCREMENT,\n",
    "        category_name VARCHAR(50) NOT NULL\n",
    "    );\n",
    "    \"\"\",\n",
    "    \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS book (\n",
    "        id INT PRIMARY KEY AUTO_INCREMENT,\n",
    "        book_name VARCHAR(100) NOT NULL,\n",
    "        book_description VARCHAR(255),\n",
    "        book_code VARCHAR(20) UNIQUE,\n",
    "        book_category VARCHAR(50),\n",
    "        book_author VARCHAR(100),\n",
    "        book_publisher VARCHAR(100),\n",
    "        book_price DECIMAL(10, 2)\n",
    "    );\n",
    "    \"\"\",\n",
    "    \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS authors (\n",
    "        idauthor INT PRIMARY KEY AUTO_INCREMENT,\n",
    "        author_name VARCHAR(100) NOT NULL\n",
    "    );\n",
    "    \"\"\",\n",
    "    \"\"\"\n",
    "    CREATE TABLE IF NOT EXISTS dayoperations (\n",
    "        id INT PRIMARY KEY AUTO_INCREMENT,\n",
    "        book_name VARCHAR(100) NOT NULL,\n",
    "        type VARCHAR(50) NOT NULL,\n",
    "        days INT NOT NULL,\n",
    "        date DATE,\n",
    "        client VARCHAR(50) NOT NULL,\n",
    "        to_date DATE\n",
    "    );\n",
    "    \"\"\"\n",
    "]\n",
    "\n",
    "# Connect to the database and execute SQL commands\n",
    "connection = make_connection()\n",
    "if connection:\n",
    "    cursor = connection.cursor()\n",
    "\n",
    "\n",
    "    for table_sql in create_tables:\n",
    "        cursor.execute(table_sql)\n",
    "        print(\"Table created successfully\")\n",
    "\n",
    "    connection.commit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_tables():\n",
    "    \"\"\"\n",
    "    Create the required tables in the database.\n",
    "    \"\"\"\n",
    "    create_table_queries = [\n",
    "        \"\"\"\n",
    "        CREATE TABLE IF NOT EXISTS users (\n",
    "            idusers INT PRIMARY KEY AUTO_INCREMENT,\n",
    "            user_name VARCHAR(50) NOT NULL,\n",
    "            user_email VARCHAR(100) UNIQUE NOT NULL,\n",
    "            user_password VARCHAR(50) NOT NULL\n",
    "        );\n",
    "        \"\"\",\n",
    "        \"\"\"\n",
    "        CREATE TABLE IF NOT EXISTS publisher (\n",
    "            idpublisher INT PRIMARY KEY AUTO_INCREMENT,\n",
    "            publisher_name VARCHAR(100) NOT NULL\n",
    "        );\n",
    "        \"\"\",\n",
    "        \"\"\"\n",
    "        CREATE TABLE IF NOT EXISTS clients (\n",
    "            idclients INT PRIMARY KEY AUTO_INCREMENT,\n",
    "            client_name VARCHAR(50) NOT NULL,\n",
    "            client_email VARCHAR(100) UNIQUE NOT NULL,\n",
    "            client_national_id VARCHAR(20) NOT NULL\n",
    "        );\n",
    "        \"\"\",\n",
    "        \"\"\"\n",
    "        CREATE TABLE IF NOT EXISTS category (\n",
    "            idcategory INT PRIMARY KEY AUTO_INCREMENT,\n",
    "            category_name VARCHAR(50) NOT NULL\n",
    "        );\n",
    "        \"\"\",\n",
    "        \"\"\"\n",
    "        CREATE TABLE IF NOT EXISTS book (\n",
    "            id INT PRIMARY KEY AUTO_INCREMENT,\n",
    "            book_name VARCHAR(100) NOT NULL,\n",
    "            book_description VARCHAR(255),\n",
    "            book_code VARCHAR(20) UNIQUE,\n",
    "            book_category VARCHAR(50),\n",
    "            book_author VARCHAR(100),\n",
    "            book_publisher VARCHAR(100),\n",
    "            book_price DECIMAL(10, 2)\n",
    "        );\n",
    "        \"\"\",\n",
    "        \"\"\"\n",
    "        CREATE TABLE IF NOT EXISTS authors (\n",
    "            idauthor INT PRIMARY KEY AUTO_INCREMENT,\n",
    "            author_name VARCHAR(100) NOT NULL\n",
    "        );\n",
    "        \"\"\",\n",
    "        \"\"\"\n",
    "        CREATE TABLE IF NOT EXISTS dayoperations (\n",
    "            id INT PRIMARY KEY AUTO_INCREMENT,\n",
    "            book_name VARCHAR(100) NOT NULL,\n",
    "            type VARCHAR(50) NOT NULL,\n",
    "            days INT NOT NULL,\n",
    "            date DATE,\n",
    "            client VARCHAR(50) NOT NULL,\n",
    "            to_date DATE\n",
    "        );\n",
    "        \"\"\"\n",
    "    ]\n",
    "\n",
    "    connection = make_connection()\n",
    "    if connection:\n",
    "        try:\n",
    "            cursor = connection.cursor()\n",
    "            for query in create_table_queries:\n",
    "                cursor.execute(query)\n",
    "                print(\"Table created or already exists.\")\n",
    "            connection.commit()\n",
    "        except Error as e:\n",
    "            print(\"Error while creating tables:\", e)\n",
    "        finally:\n",
    "            cursor.close()\n",
    "            connection.close()\n",
    "            print(\"MySQL connection closed.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Clearing destination tables...\n",
      "ETL process finished\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Input \u001b[0;32mIn [9]\u001b[0m, in \u001b[0;36m<cell line: 181>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    178\u001b[0m     \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    179\u001b[0m         \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mETL process finished\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m--> 181\u001b[0m \u001b[43mrun_full_etl\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
      "Input \u001b[0;32mIn [9]\u001b[0m, in \u001b[0;36mrun_full_etl\u001b[0;34m()\u001b[0m\n\u001b[1;32m    163\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    164\u001b[0m         \u001b[38;5;66;03m# Check source data\u001b[39;00m\n\u001b[1;32m    165\u001b[0m \u001b[38;5;66;03m#         print(\"Checking source tables...\")\u001b[39;00m\n\u001b[1;32m    166\u001b[0m \u001b[38;5;66;03m#         check_source_tables(cursor)\u001b[39;00m\n\u001b[1;32m    167\u001b[0m         \n\u001b[1;32m    168\u001b[0m         \u001b[38;5;66;03m# Clear destination tables\u001b[39;00m\n\u001b[1;32m    169\u001b[0m         \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mClearing destination tables...\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m--> 170\u001b[0m         \u001b[43mclear_destination_tables\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconn\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcursor\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    172\u001b[0m         \u001b[38;5;66;03m# Run ETL process\u001b[39;00m\n\u001b[1;32m    173\u001b[0m         \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mStarting ETL process...\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "Input \u001b[0;32mIn [9]\u001b[0m, in \u001b[0;36mclear_destination_tables\u001b[0;34m(conn, cursor)\u001b[0m\n\u001b[1;32m    142\u001b[0m tables \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m    143\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfact_category_popularity\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[1;32m    144\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfact_dayoperations\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdim_date\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m    149\u001b[0m ]\n\u001b[1;32m    150\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m table \u001b[38;5;129;01min\u001b[39;00m tables:\n\u001b[0;32m--> 151\u001b[0m     \u001b[43mcursor\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexecute\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43mf\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mTRUNCATE TABLE \u001b[39;49m\u001b[38;5;132;43;01m{\u001b[39;49;00m\u001b[43mtable\u001b[49m\u001b[38;5;132;43;01m}\u001b[39;49;00m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    153\u001b[0m \u001b[38;5;66;03m# Re-enable foreign key checks\u001b[39;00m\n\u001b[1;32m    154\u001b[0m cursor\u001b[38;5;241m.\u001b[39mexecute(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mSET FOREIGN_KEY_CHECKS = 1;\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/mysql/connector/cursor.py:537\u001b[0m, in \u001b[0;36mMySQLCursor.execute\u001b[0;34m(self, operation, params, multi)\u001b[0m\n\u001b[1;32m    534\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_execute_iter(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_connection\u001b[38;5;241m.\u001b[39mcmd_query_iter(stmt))\n\u001b[1;32m    536\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 537\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_handle_result(\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_connection\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcmd_query\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstmt\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m    538\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m InterfaceError \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m    539\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_connection\u001b[38;5;241m.\u001b[39mhave_next_result:\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/mysql/connector/opentelemetry/context_propagation.py:106\u001b[0m, in \u001b[0;36mwith_context_propagation.<locals>.wrapper\u001b[0;34m(cnx, *args, **kwargs)\u001b[0m\n\u001b[1;32m    103\u001b[0m     cnx\u001b[38;5;241m.\u001b[39mquery_attrs_append(value\u001b[38;5;241m=\u001b[39m(TRACEPARENT_HEADER_NAME, tp_header))\n\u001b[1;32m    105\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 106\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[43mmethod\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcnx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    108\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m tp_header \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/mysql/connector/connection.py:859\u001b[0m, in \u001b[0;36mMySQLConnection.cmd_query\u001b[0;34m(self, query, raw, buffered, raw_as_string)\u001b[0m\n\u001b[1;32m    857\u001b[0m query \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mbytes\u001b[39m(packet)\n\u001b[1;32m    858\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 859\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_handle_result(\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_send_cmd\u001b[49m\u001b[43m(\u001b[49m\u001b[43mServerCmd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mQUERY\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mquery\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m    860\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m ProgrammingError \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m    861\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m err\u001b[38;5;241m.\u001b[39merrno \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m3948\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLoading local data is disabled\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m err\u001b[38;5;241m.\u001b[39mmsg:\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/mysql/connector/connection.py:478\u001b[0m, in \u001b[0;36mMySQLConnection._send_cmd\u001b[0;34m(self, command, argument, packet_number, packet, expect_response, compressed_packet_number)\u001b[0m\n\u001b[1;32m    475\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m    476\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m OperationalError(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mMySQL Connection not available\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m--> 478\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_socket\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrecv\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mif\u001b[39;00m expect_response \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/mysql/connector/network.py:637\u001b[0m, in \u001b[0;36mMySQLSocket.recv\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    635\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrecv\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28mbytearray\u001b[39m:\n\u001b[1;32m    636\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Get packet from the MySQL server comm channel.\"\"\"\u001b[39;00m\n\u001b[0;32m--> 637\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_netbroker\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrecv\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msock\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43maddress\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/mysql/connector/network.py:229\u001b[0m, in \u001b[0;36mNetworkBrokerPlain.recv\u001b[0;34m(self, sock, address)\u001b[0m\n\u001b[1;32m    226\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Receive `one` packet from the MySQL server.\"\"\"\u001b[39;00m\n\u001b[1;32m    227\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    228\u001b[0m     \u001b[38;5;66;03m# Read the header of the MySQL packet\u001b[39;00m\n\u001b[0;32m--> 229\u001b[0m     header \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_recv_chunk\u001b[49m\u001b[43m(\u001b[49m\u001b[43msock\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msize\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mPACKET_HEADER_LENGTH\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    231\u001b[0m     \u001b[38;5;66;03m# Pull the payload length and sequence id\u001b[39;00m\n\u001b[1;32m    232\u001b[0m     payload_len, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_pktnr \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    233\u001b[0m         struct\u001b[38;5;241m.\u001b[39munpack(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m<I\u001b[39m\u001b[38;5;124m\"\u001b[39m, header[\u001b[38;5;241m0\u001b[39m:\u001b[38;5;241m3\u001b[39m] \u001b[38;5;241m+\u001b[39m \u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\x00\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)[\u001b[38;5;241m0\u001b[39m],\n\u001b[1;32m    234\u001b[0m         header[\u001b[38;5;241m3\u001b[39m],\n\u001b[1;32m    235\u001b[0m     )\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/mysql/connector/network.py:174\u001b[0m, in \u001b[0;36mNetworkBrokerPlain._recv_chunk\u001b[0;34m(self, sock, size)\u001b[0m\n\u001b[1;32m    172\u001b[0m pkt_view \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mmemoryview\u001b[39m(pkt)\n\u001b[1;32m    173\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m size:\n\u001b[0;32m--> 174\u001b[0m     read \u001b[38;5;241m=\u001b[39m \u001b[43msock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrecv_into\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpkt_view\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msize\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    175\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m read \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m size \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    176\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InterfaceError(errno\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2013\u001b[39m)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/ssl.py:1273\u001b[0m, in \u001b[0;36mSSLSocket.recv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1269\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m flags \u001b[38;5;241m!=\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m   1270\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m   1271\u001b[0m           \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnon-zero flags not allowed in calls to recv_into() on \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m%\u001b[39m\n\u001b[1;32m   1272\u001b[0m           \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m)\n\u001b[0;32m-> 1273\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnbytes\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbuffer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1274\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   1275\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39mrecv_into(buffer, nbytes, flags)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/ssl.py:1129\u001b[0m, in \u001b[0;36mSSLSocket.read\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m   1127\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1128\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m buffer \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 1129\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sslobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbuffer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1130\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   1131\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_sslobj\u001b[38;5;241m.\u001b[39mread(\u001b[38;5;28mlen\u001b[39m)\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "def etl_process(conn, cursor):\n",
    "    try:\n",
    "        # 1. Populate dim_date\n",
    "        dim_date_insert = \"\"\"\n",
    "        INSERT IGNORE INTO dim_date (date_key, full_date, year, month, month_name, quarter, day, day_name, is_weekend)\n",
    "        SELECT DISTINCT\n",
    "            CAST(DATE_FORMAT(date, '%Y%m%d') AS UNSIGNED) as date_key,\n",
    "            date as full_date,\n",
    "            YEAR(date) as year,\n",
    "            MONTH(date) as month,\n",
    "            MONTHNAME(date) as month_name,\n",
    "            QUARTER(date) as quarter,\n",
    "            DAY(date) as day,\n",
    "            DAYNAME(date) as day_name,\n",
    "            CASE WHEN DAYOFWEEK(date) IN (1, 7) THEN 'Yes' ELSE 'No' END as is_weekend\n",
    "        FROM dayoperations;\n",
    "        \"\"\"\n",
    "        print(\"Populating dim_date...\")\n",
    "        cursor.execute(dim_date_insert)\n",
    "\n",
    "        # 2. Populate dim_category\n",
    "        dim_category_insert = \"\"\"\n",
    "        INSERT INTO dim_category (category_key, category_name, parent_category, category_level, category_path)\n",
    "        SELECT \n",
    "            idcategory as category_key,\n",
    "            category_name,\n",
    "            NULL as parent_category,\n",
    "            1 as category_level,\n",
    "            category_name as category_path\n",
    "        FROM category;\n",
    "        \"\"\"\n",
    "        print(\"Populating dim_category...\")\n",
    "        cursor.execute(dim_category_insert)\n",
    "\n",
    "        # 3. Populate dim_book\n",
    "        dim_book_insert = \"\"\"\n",
    "        INSERT INTO dim_book (book_key, book_name, book_code, book_price, author_name, publisher_name, category_name)\n",
    "        SELECT \n",
    "            b.id as book_key,\n",
    "            b.book_name,\n",
    "            b.book_code,\n",
    "            b.book_price,\n",
    "            a.author_name,\n",
    "            p.publisher_name,\n",
    "            c.category_name\n",
    "        FROM book b\n",
    "        LEFT JOIN authors a ON b.book_author = a.idauthor\n",
    "        LEFT JOIN publisher p ON b.book_publisher = p.idpublisher\n",
    "        LEFT JOIN category c ON b.book_category = c.idcategory;\n",
    "        \"\"\"\n",
    "        print(\"Populating dim_book...\")\n",
    "        cursor.execute(dim_book_insert)\n",
    "\n",
    "        # 4. Populate dim_client with corrected column names\n",
    "        # dim_client_insert = \"\"\"\n",
    "        # INSERT INTO dim_client \n",
    "        #     (client_key, client_name, client_email, client_national, client_status, registration_date)\n",
    "        # SELECT \n",
    "        #     c.idclients,\n",
    "        #     c.client_name,\n",
    "        #     c.client_email,\n",
    "        #     c.client_nationalid,  -- Fixed column name\n",
    "        #     'Active' as client_status,\n",
    "        #     MIN(d.date) as registration_date\n",
    "        # FROM clients c\n",
    "        # LEFT JOIN dayoperations d ON c.idclients = d.client\n",
    "        # GROUP BY \n",
    "        #     c.idclients,\n",
    "        #     c.client_name,\n",
    "        #     c.client_email,\n",
    "        #     c.client_nationalid;  -- Fixed column name\n",
    "        # \"\"\"\n",
    "        # print(\"Populating dim_client...\")\n",
    "        # cursor.execute(dim_client_insert)\n",
    "\n",
    "        # # 5. Populate fact_dayoperations\n",
    "        # fact_dayops_insert = \"\"\"\n",
    "        # INSERT INTO fact_dayoperations \n",
    "        #     (operation_key, date_key, book_key, client_key, operation_type, duration_days, amount, status, quantity)\n",
    "        # SELECT \n",
    "        #     d.id as operation_key,\n",
    "        #     CAST(DATE_FORMAT(d.date, '%Y%m%d') AS UNSIGNED) as date_key,\n",
    "        #     b.id as book_key,\n",
    "        #     d.id as client_key,\n",
    "        #     d.type as operation_type,\n",
    "        #     d.days as duration_days,\n",
    "        #     CASE \n",
    "        #         WHEN d.type = 'borrow' THEN b.book_price * d.days\n",
    "        #         ELSE 0 \n",
    "        #     END as amount,\n",
    "        #     CASE \n",
    "        #         WHEN d.to_date IS NOT NULL THEN 'Completed'\n",
    "        #         ELSE 'Active'\n",
    "        #     END as status,\n",
    "        #     1 as quantity\n",
    "        # FROM dayoperations d\n",
    "        # JOIN book b ON d.book_name = b.book_name;\n",
    "        # \"\"\"\n",
    "        # print(\"Populating fact_dayoperations...\")\n",
    "        # cursor.execute(fact_dayops_insert)\n",
    "\n",
    "        # 6. Populate fact_category_popularity\n",
    "        fact_category_insert = \"\"\"\n",
    "        INSERT INTO fact_category_popularity \n",
    "            (popularity_key, date_key, book_key, category_key, \n",
    "             total_operations, total_duration, total_revenue, unique_readers)\n",
    "        SELECT \n",
    "            ROW_NUMBER() OVER (PARTITION BY DATE_FORMAT(d.date, '%Y%m%d'), b.book_category \n",
    "                               ORDER BY DATE_FORMAT(d.date, '%Y%m%d')) as popularity_key,\n",
    "            CAST(DATE_FORMAT(d.date, '%Y%m%d') AS UNSIGNED) as date_key,\n",
    "            b.id as book_key,\n",
    "            b.book_category as category_key,\n",
    "            COUNT(*) as total_operations,\n",
    "            SUM(d.days) as total_duration,\n",
    "            SUM(CASE \n",
    "                WHEN d.type = 'borrow' THEN b.book_price * d.days\n",
    "                ELSE 0 \n",
    "            END) as total_revenue,\n",
    "            COUNT(DISTINCT d.client) as unique_readers\n",
    "        FROM dayoperations d\n",
    "        JOIN book b ON d.book_name = b.book_name\n",
    "        GROUP BY DATE_FORMAT(d.date, '%Y%m%d'), b.id, b.book_category;\n",
    "        \"\"\"\n",
    "        print(\"Populating fact_category_popularity...\")\n",
    "        cursor.execute(fact_category_insert)\n",
    "\n",
    "        # Commit all changes\n",
    "        conn.commit()\n",
    "        print(\"ETL process completed successfully!\")\n",
    "\n",
    "    except mysql.connector.Error as e:\n",
    "        print(f\"Error during ETL process: {e}\")\n",
    "        conn.rollback()\n",
    "        raise\n",
    "\n",
    "def clear_destination_tables(conn, cursor):\n",
    "    try:\n",
    "        # Disable foreign key checks\n",
    "        cursor.execute(\"SET FOREIGN_KEY_CHECKS = 0;\")\n",
    "        \n",
    "        # Delete in reverse order of dependencies\n",
    "        tables = [\n",
    "            'fact_category_popularity',\n",
    "            'fact_dayoperations',\n",
    "            'dim_book',\n",
    "            'dim_client',\n",
    "            'dim_category',\n",
    "            'dim_date'\n",
    "        ]\n",
    "        for table in tables:\n",
    "            cursor.execute(f\"TRUNCATE TABLE {table}\")\n",
    "        \n",
    "        # Re-enable foreign key checks\n",
    "        cursor.execute(\"SET FOREIGN_KEY_CHECKS = 1;\")\n",
    "        conn.commit()\n",
    "        print(\"Destination tables cleared successfully!\")\n",
    "    except mysql.connector.Error as e:\n",
    "        print(f\"Error clearing tables: {e}\")\n",
    "        conn.rollback()\n",
    "\n",
    "# Execute full ETL process\n",
    "def run_full_etl():\n",
    "    try:\n",
    "        # Check source data\n",
    "#         print(\"Checking source tables...\")\n",
    "#         check_source_tables(cursor)\n",
    "        \n",
    "        # Clear destination tables\n",
    "        print(\"\\nClearing destination tables...\")\n",
    "        clear_destination_tables(conn, cursor)\n",
    "        \n",
    "        # Run ETL process\n",
    "        print(\"\\nStarting ETL process...\")\n",
    "        etl_process(conn, cursor)\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(f\"ETL process failed: {e}\")\n",
    "    finally:\n",
    "        print(\"ETL process finished\")\n",
    "\n",
    "run_full_etl()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
